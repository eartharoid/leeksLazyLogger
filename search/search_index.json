{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"leekslazylogger","text":""},{"location":"#about","title":"About","text":"<p>leekslazylogger is an easy-to-use and lightweight logger for Node.js with colours, timestamps, and files.</p>"},{"location":"#features","title":"Features","text":"<p>Some of the things that make leekslazylogger awesome:</p> <ul> <li>Timestamps</li> <li>2 built-in transports<ul> <li>Console<ul> <li>Uses leeks.js for colours/styles</li> <li>Customisable format</li> </ul> </li> <li>File<ul> <li>Automatic clean-up</li> </ul> </li> <li>Easy to create your own transport (such as a HTTP transport)</li> </ul> </li> <li>Highly customisable</li> </ul>"},{"location":"#screenshots","title":"Screenshots","text":"<p>These screenshots show the default formats. You can make it completely different if you want.</p>"},{"location":"#console","title":"Console","text":""},{"location":"#file","title":"File","text":"<p>You can change or remove the header in log files.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>For installation and usage instructions/examples, see Getting Started.</p>"},{"location":"#support","title":"Support","text":"<p>Go to the docs, or ask for help in #general-support on Discord.</p> <p></p>"},{"location":"#donate","title":"Donate","text":""},{"location":"customisation/","title":"Customisation","text":"<p>Options can be set on initialisation, but are not required. You can also use the <code>options</code> setter to set options after initialisation. The object will be merged deeply with the existing (or default) options.</p> <pre><code>log.error.http('this will throw an error');\nlog.options = {\n    // in this example only `namespaces` is modified,\n    // so `levels` and `transports` are preserved from existing/default options\n    namespaces: ['http']\n};\nlog.success.http('this works');\n</code></pre>"},{"location":"customisation/#logger-options","title":"Logger options","text":"Defaults <p>See defaults.ts</p> <p>Types:</p> <pre><code>interface Partial&lt;LoggerOptions&gt; {\n    levels?: {\n        [name: string]: string\n    },\n    namespaces?: Array&lt;string&gt;,\n    transports?: Array&lt;Transport&gt;\n}\n</code></pre>"},{"location":"customisation/#levels","title":"<code>levels</code>","text":"Default <pre><code>levels: {\n    debug: 'info',\n    verbose: 'info',\n    info: 'info',\n    success: 'info',\n    warn: 'warn',\n    notice: 'warn',\n    error: 'error',\n    critical: 'error'\n}\n</code></pre> <p>You shouldn't need to change these. If you do, you're probably using levels incorrectly and you should look at namespaces.</p>"},{"location":"customisation/#namespaces","title":"<code>namespaces</code>","text":"Default <pre><code>namespaces: []\n</code></pre> <p>Use namespaces to separate your logs into to logical areas (eg. <code>log.info.exampleNamespace()</code>)</p>"},{"location":"customisation/#transports","title":"<code>transports</code>","text":"Default <pre><code>transports: [\n    new ConsoleTransport(),\n    new FileTransport()\n]\n</code></pre> <p>Transports are where the heavy lifting is done. When you use a log function, a log object is passed to the write function of each transport with a matching log level.</p> <ul> <li>Customise ConsoleTransport</li> <li>Customise FileTransport</li> <li>Browse community transports</li> <li>Make your own transport</li> </ul>"},{"location":"getting-started/","title":"Getting started","text":""},{"location":"getting-started/#installation","title":"Installation","text":"<p>Install with:</p> pnpm <pre><code>pnpm add leekslazylogger\n</code></pre> npm <pre><code>npm i leekslazylogger\n</code></pre> yarn <pre><code>yarn add leekslazylogger\n</code></pre> <p>And require it in your code:</p> <pre><code>const { Logger } = require('leekslazylogger');\nconst log = new Logger(options);\n</code></pre> <p>For <code>options</code>, see customisation. Omit options to use the defaults.</p>"},{"location":"getting-started/#basic-usage","title":"Basic usage","text":"<pre><code>log[level](...content)\n// or\nlog[level][namespace](...content)\n</code></pre>"},{"location":"getting-started/#examples","title":"Examples","text":"Default levels <ul> <li><code>debug</code></li> <li><code>verbose</code></li> <li><code>info</code></li> <li><code>success</code></li> <li><code>warn</code></li> <li><code>notice</code></li> <li><code>error</code></li> <li><code>critical</code></li> </ul> <pre><code>log.info('information', 'more information');\nlog.error('oops!', new Error('an error'));\nlog.debug('something happened!', { something: ['hello', 'world'] });\n</code></pre> <pre><code>// in your options:\nnamespaces: ['commands', 'plugins', 'http']\n\n// ...\nlog.error.commands('an error occurred during command execution')\nlog.success.plugins('loaded a plugin')\nlog.info.http('received a request from someone')\n</code></pre>"},{"location":"transports/community/","title":"Community transports","text":""},{"location":"transports/creating-a-transport/","title":"Creating a transport","text":"<p>Look at the built-in <code>ConsoleTransport</code> for guidance. Ideally use a class and extend <code>Transport</code>, but as long as your object has a <code>level</code> property and <code>write</code> function, it should work.</p> <p>The <code>level</code> property tells the logger if a log should be sent to your transport. The <code>write</code> function takes the <code>Log</code> object and does something with it, such as sending it to console, a file, or over the internet with a HTTP request.</p>"},{"location":"transports/built-in/console/","title":"Console","text":""},{"location":"transports/built-in/console/#usage","title":"Usage","text":"<pre><code>const Logger = require('leekslazylogger');\nconst { ConsoleTransport } = require('leekslazylogger/dist/transports');\nconst log = new Logger({\n    transports: [\n        new ConsoleTransport()\n    ]\n});\n</code></pre> <p>Or, alternatively:</p> <pre><code>const Logger = require('leekslazylogger');\nconst log = new Logger({\n    transports: [\n        new Logger.transports.ConsoleTransport()\n    ]\n});\n</code></pre>"},{"location":"transports/built-in/console/#options","title":"Options","text":"Defaults <p>See defaults.ts</p> <p>Types:</p> <pre><code>interface Partial&lt;ConsoleTransportOptions&gt; {\n    colours?: {\n        [level: string]: string\n    },\n    format?: string | ((this: ConsoleTransportOptions, log: Log) =&gt; string),\n    level?: string,\n    timestamp?: string | ((date: Date) =&gt; string)\n}\n</code></pre>"},{"location":"transports/built-in/console/#colours","title":"<code>colours</code>","text":"Default <pre><code>colours: {\n    critical: '&amp;!4&amp;0',\n    debug: '&amp;1',\n    error: '&amp;4',\n    info: '&amp;3',\n    notice: '&amp;!6&amp;0',\n    success: '&amp;2',\n    warn: '&amp;6'\n}\n</code></pre> <p>Colours used by the default format function.</p>"},{"location":"transports/built-in/console/#format","title":"<code>format</code>","text":"Default <pre><code>format: function (this: ConsoleTransportOptions, log: Log): string {\n    const timestamp = typeof this.timestamp === 'function' ? this.timestamp(log.timestamp) : dtf.fill(this.timestamp, log.timestamp);\n    const colour = colours[log.level.name] ?? '';\n    return short(`${colour}[${timestamp}] [${log.level.name.toUpperCase()}] ${log.namespace ? `(${log.namespace.toUpperCase()}) ` : ''}${log.content}`);\n}\n</code></pre> <p>Either a string containing placeholders, or a function which returns a string.</p>"},{"location":"transports/built-in/console/#string-format","title":"String format","text":"<p>Placeholders:</p> <ul> <li><code>{timestamp}</code></li> <li><code>{level}</code> / <code>{LEVEL}</code></li> <li><code>{namespace}</code> / <code>{NAMESPACE}</code></li> <li><code>{file}</code></li> <li><code>{line}</code></li> <li><code>{column}</code></li> <li><code>{content}</code></li> </ul>"},{"location":"transports/built-in/console/#function-format","title":"Function format","text":"<p>To access the transport options (eg. <code>timestamp</code>) from within the function, use a classic function (not an ES6 arrow function) so <code>this</code> is the options object. The function is passed one argument, the <code>Log</code> object.</p> <code>Log</code> object <pre><code>interface Log {\n    content: string,\n    level: LogLevel,\n    namespace: string | null,\n    timestamp: Date\n}\n</code></pre>"},{"location":"transports/built-in/console/#level","title":"<code>level</code>","text":"Default <pre><code>level: 'info'\n</code></pre> <p>The name of the minimum log level that this transport will receive.</p>"},{"location":"transports/built-in/console/#timestamp","title":"<code>timestamp</code>","text":"Default <pre><code>timestamp: 'DD/MM/YY HH:mm:ss'\n</code></pre> <p>Either a DTF placeholder format, or a function which takes a <code>Date</code> and returns a string.</p>"},{"location":"transports/built-in/file/","title":"File","text":""},{"location":"transports/built-in/file/#usage","title":"Usage","text":"<pre><code>const Logger = require('leekslazylogger');\nconst { FileTransport } = require('leekslazylogger/dist/transports');\nconst log = new Logger({\n    transports: [\n        new FileTransport()\n    ]\n});\n</code></pre> <p>Or, alternatively:</p> <pre><code>const Logger = require('leekslazylogger');\nconst log = new Logger({\n    transports: [\n        new Logger.transports.FileTransport()\n    ]\n});\n</code></pre>"},{"location":"transports/built-in/file/#options","title":"Options","text":"Defaults <p>See defaults.ts</p> <p>Types:</p> <pre><code>interface Partial&lt;FileTransportOptions&gt; {\n    clean_directory?: number\n    directory?: string\n    file?: string | (() =&gt; string),\n    format?: string | ((this: FileTransportOptions, log: Log) =&gt; string),\n    header?: string | ((this: FileTransportOptions) =&gt; string),\n    level?: string,\n    name?: string,\n    new_file?: 'day' | 'run',\n    timestamp?: string | ((date: Date) =&gt; string)\n}\n</code></pre>"},{"location":"transports/built-in/file/#clean_directory","title":"<code>clean_directory</code>","text":"Default <pre><code>clean_directory: 7\n</code></pre> <p>The number of days to keep log files. Set to <code>-1</code> to never delete log files.</p>"},{"location":"transports/built-in/file/#directory","title":"<code>directory</code>","text":"Default <pre><code>directory: './logs'\n</code></pre> <p>The directory to use for log files.</p>"},{"location":"transports/built-in/file/#file_1","title":"<code>file</code>","text":"Default <pre><code>file: 'YYYY-MM-DD.log'\n</code></pre> <p>A string or a function that returns a string - the filename.</p>"},{"location":"transports/built-in/file/#format","title":"<code>format</code>","text":"Default <pre><code>format: function (this: FileTransportOptions, log: Log): string {\n    const timestamp = typeof this.timestamp === 'function' ? this.timestamp(log.timestamp) : dtf.fill(this.timestamp, log.timestamp);\n    return `[${timestamp}] [${log.level.name.toUpperCase()}] ${log.namespace ? `(${log.namespace.toUpperCase()}) ` : ''}${log.content}`;\n}\n</code></pre> <p>Either a string containing placeholders, or a function which returns a string.</p>"},{"location":"transports/built-in/file/#string-format","title":"String format","text":"<p>Placeholders:</p> <ul> <li><code>{timestamp}</code></li> <li><code>{level}</code> / <code>{LEVEL}</code></li> <li><code>{namespace}</code> / <code>{NAMESPACE}</code></li> <li><code>{file}</code></li> <li><code>{line}</code></li> <li><code>{column}</code></li> <li><code>{content}</code></li> </ul>"},{"location":"transports/built-in/file/#function-format","title":"Function format","text":"<p>To access the transport options (eg. <code>timestamp</code>) from within the function, use a classic function (not an ES6 arrow function) so <code>this</code> is the options object. The function is passed one argument, the <code>Log</code> object.</p> <code>Log</code> object <pre><code>interface Log {\n    content: string,\n    level: LogLevel,\n    namespace: string | null,\n    timestamp: Date\n}\n</code></pre>"},{"location":"transports/built-in/file/#header","title":"<code>header</code>","text":"Default <pre><code>header: function (this: FileTransportOptions): string {\n    const datetime = dtf.fill('DDDD, DD MMMM YYYY at HH:mm AMPM');\n    const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n    return `\\r\\n\\t\u276f ${this.name}\\r\\n\\t\u276f Powered by leekslazylogger v${version}\\r\\n\\t\u276f Log level \"${this.level}\"\\r\\n\\t\u276f Node.js ${process.version} on ${process.platform}\\r\\n\\t\u276f ${datetime} (${timezone}) --&gt;\\r\\n`;\n}\n</code></pre> <p>A function which returns a string; inserted at the start of log files (or at startup if using <code>run</code> mode). To access the transport options (eg. <code>timestamp</code>) from within the function, use a classic function (not an ES6 arrow function) so <code>this</code> is the options object. Return an empty string to disable.</p>"},{"location":"transports/built-in/file/#level","title":"<code>level</code>","text":"Default <pre><code>level: 'info'\n</code></pre> <p>The name of the minimum log level that this transport will receive.</p>"},{"location":"transports/built-in/file/#name","title":"<code>name</code>","text":"Default <pre><code>name: 'A leekslazylogger project'\n</code></pre> <p>A string used in the default <code>header</code> format.</p>"},{"location":"transports/built-in/file/#new_file","title":"<code>new_file</code>","text":"Default <pre><code>new_file: 'day'\n</code></pre> <p>Either <code>'day'</code> or <code>'run'</code> to create a new file every day or every time the program is run. Change the <code>file</code> if using <code>run</code>! </p> <p>A string used in the default <code>header</code> format.</p>"},{"location":"transports/built-in/file/#timestamp","title":"<code>timestamp</code>","text":"Default <pre><code>timestamp: 'DD/MM/YY HH:mm:ss'\n</code></pre> <p>Either a DTF placeholder format, or a function which takes a <code>Date</code> and returns a string.</p>"}]}